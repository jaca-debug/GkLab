<!DOCTYPE html>
<html><!--
   This web page does the minimal setup for using mouse events along
   with 2D canvas graphics.
--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="UTF-8">
<title>CS424, Lab 2, Exercise 2</title>
<style>
    /* This style section is here to make the canvas more obvious on the
       page.  It is white on a light gray page background, with a thin
       black border.  Also, turn off text selection to avoid having
       selection interfere with mouse action. */
    body {
        background-color: #DDDDDD;
        -webkit-user-select: none; /* turn off text selection  / Webkit */
        -moz-user-select: none;    /* Firefox */
        -ms-user-select: none;     /* IE 10  */
        -o-user-select: none;      /* Opera */
        user-select: none;
    }
    canvas {
        background-color: white;
        display: block;
    }
    #canvasholder {
        border:2px solid black;
        float: left; /* This makes the border exactly fit the canvas. */
    }

    .menu {
        display:flex;
        gap:20px;
    }
</style>
<script>

    "use strict";  // gives improved error-checking in scripts.

    var canvas;    // The canvas element on which we will draw.
    var graphics;  // A 2D graphics context for drawing on the canvas.
    
    /**
     * This function returns a string representing a random RGB color.
     * The returned string can be assigned as the value of graphics.fillStyle
     * or graphics.strokeStyle.
     */
    function randomColorString() {
        var r = Math.floor(256*Math.random());
        var g = Math.floor(256*Math.random());
        var b = Math.floor(256*Math.random());
        return "rgb(" + r + "," + g + "," + b + ")";
    }
        
    function clearcanvas() {
        graphics.clearRect(0,0,canvas.width, canvas.height);
    }


    /**
     * This function is called in init() to set up mouse event handling
     * on the canvas.  You can modify the nested functions doMouseDown,
     * doMouseDrag, and possibly doMouseUp to change the reponse to
     * mouse events.  As an example, this program does some simple drawing.
     */
    function installMouseHandler() {

        var dragging = false;  // set to true when a drag action is in progress.
        var startX, startY;    // coordinates of mouse at start of drag.
        var prevX, prevY;      // previous mouse position during a drag.
        
        var colorChoice;  // Integer code for the selected color in the "colorChoide"
                          // popup menu.  The value is assigned in doMouseDown.

        var wielokatChoice;

        function drawDiamond(x, y) {
            let diamond = new Path2D();
                
                diamond.moveTo(x, y);
                diamond.lineTo(x + 100, y);
                diamond.lineTo(x + 125, y + 40);
                diamond.lineTo(x + 125, y + 40);
                diamond.lineTo(x + 50, y + 150);
                diamond.lineTo(x - 25, y + 40);
                diamond.lineTo(x, y);
                // diamond.moveTo(175, 240);
                // diamond.lineTo()
                diamond.closePath();
                
                graphics.lineWidth = 5;
                graphics.stroke(diamond, "black");
                graphics.lineWidth = 1;

                graphics.fillStyle = "#ff00fe";
                graphics.fill(diamond);

                graphics.moveTo(x - 25, y + 40);
                graphics.lineTo(x + 125, y + 40);
                graphics.lineWidth = 3;
                graphics.stroke();
                graphics.lineWidth = 1;

                graphics.fillStyle = "white";
                graphics.fillOval(x + 15, y + 20, 10, 10);
                graphics.fillOval(x + 85, y + 20, 10, 10);

                graphics.fillStyle = "black";
                graphics.fillOval(x + 15, y + 20, 6, 6);
                graphics.fillOval(x + 85, y + 20, 6, 6);

                graphics.fillStyle = "white";
                graphics.fillOval(x + 12.5, y + 17.5, 2, 2);
                graphics.fillOval(x + 83.5, y + 17.5, 2, 2);
                

                let corner1 = new Path2D();
                corner1.moveTo(x + 20, y + 75);
                corner1.quadraticCurveTo(x + 27, y + 75, x + 21.5, y + 68);
                corner1.quadraticCurveTo(x + 22.5, y + 75, x + 21.5, y + 75);
                corner1.closePath();


                let smile = new Path2D();
                smile.moveTo(x + 22.5, y + 72.5);
                smile.quadraticCurveTo(x + 50, y + 85, x + 80, y + 72.5);
                smile.quadraticCurveTo(x + 50, y + 110, x + 22.5, y + 72.5);

                let corner2 = new Path2D();
                corner2.moveTo(x + 80, y +68.5);
                corner2.quadraticCurveTo(x + 75, y + 75, x + 81.5, y + 76);
                corner2.quadraticCurveTo(x + 79, y + 75, x + 80, y + 68.5);
                
                
                graphics.stroke(corner1);
                graphics.stroke(smile);
                graphics.stroke(corner2);

                graphics.fillStyle = "black";
                graphics.fill(corner1);
                graphics.fill(smile);
                graphics.fill(corner2);
                
                graphics.fillStyle = "white";
                graphics.fillRect(x + 45, y + 79, 5, 5);
                graphics.fillRect(x + 51, y + 79, 5, 5);
        }
        
        function doMouseDown(evt) {
                // This function is called when the user presses a button on the mouse.
                // Only the main mouse button will start a drag.
            if (dragging) {
                return;  // if a drag is in progress, don't start another.
            }
            if (evt.button != 0) {
                return;  // don't respond unless the button is the main (left) mouse button.
            }
            var x,y;  // mouse position in canvas coordinates
            var r = canvas.getBoundingClientRect();
            x = Math.round(evt.clientX - r.left);  // translate mouse position from screen coords to canvas coords.
            y = Math.round(evt.clientY - r.top);   // round to integer values; some browsers would give non-integers.
            dragging = true;  // (this won't be the case for all mousedowns in all programs)
            if (dragging) {
                startX = prevX = x;
                startY = prevY = y;
                document.addEventListener("mousemove", doMouseMove, false);
                document.addEventListener("mouseup", doMouseUp, false);
            }
            colorChoice = Number(document.getElementById("colorChoice").value);
            wielokatChoice = Number(document.getElementById("wielokatChoice").value);
            // TODO: Anything else to do when mouse is first pressed?
        }
        
        function doMouseMove(evt) {
                // This function is called when the user moves the mouse during a drag.
            if (!dragging) {
                return;  // (shouldn't be possible)
            }
            var x,y;  // mouse position in canvas coordinates
            var r = canvas.getBoundingClientRect();
            x = Math.round(evt.clientX - r.left);  
            y = Math.round(evt.clientY - r.top);
            
            /*------------------------------------------------------------*/
            /* TODO: Add support for more drawing tools. */
            
            if ( Math.abs(x-prevX) + Math.abs(y-prevY) < 3 ) {
                return;  // don't draw squares too close together
            }
            
            if (wielokatChoice == 1) {
                drawDiamond(x, y);

                prevX = x;
                prevY = y;
                return;
            }

            if (colorChoice == 0) {
                graphics.fillStyle = randomColorString();
            }
            else if (colorChoice == 1) {
                graphics.fillStyle = "red";
            }
            else if (colorChoice == 2) {
                graphics.fillStyle = "green";
            }
            else if (colorChoice == 3) {
                graphics.fillStyle = "blue";
            }
            else if (colorChoice == 4) {
                graphics.fillStyle = "pink";
            }
            graphics.fillRect(x-20,y-20,40,40);
            graphics.strokeRect(x-20,y-20,40,40);
            
            /*------------------------------------------------------------*/
            
            prevX = x;  // update prevX,prevY to prepare for next call to doMouseMove
            prevY = y;
        }
        
        function doMouseUp(evt) {
                // This function is called when the user releases a mouse button during a drag.
            if (!dragging) {
                return;  // (shouldn't be possible)
            }
            dragging = false;
            document.removeEventListener("mousemove", doMouseMove, false);
            document.removeEventListener("mouseup", doMouseMove, false);
         }
         
         canvas.addEventListener("mousedown", doMouseDown, false);

   } // end installMouseHandler


   /**
     * This function can be called to add a collection of extra drawing function to
     * a graphics context, to make it easier to draw basic shapes with that context.
     * The parameter, graphics, must be a canvas 2d graphics context.
     *
     * The following new functions are added to the graphics context:
     *
     *    graphics.strokeLine(x1,y1,x2,y2) -- stroke the line from (x1,y1) to (x2,y2).
     *    graphics.fillCircle(x,y,r) -- fill the circle with center (x,y) and radius r.
     *    graphics.strokeCircle(x,y,r) -- stroke the circle.
     *    graphics.fillOval(x,y,r1,r2) -- fill oval with center (x,y) and radii r1 and r2.
     *    graphics.stokeOval(x,y,r1,r2) -- stroke the oval
     *    graphics.fillPoly(x1,y1,x2,y2,...) -- fill polygon with vertices (x1,y1), (x2,y2), ...
     *    graphics.strokePoly(x1,y1,x2,y2,...) -- stroke the polygon.
     *    graphics.getRGB(x,y) -- returns the color components of pixel at (x,y) as an array of
     *         four integers in the range 0 to 255, in the order red, green, blue, alpha.
     *
     * (Note that "this" in a function that is called as a member of an object refers to that
     * object.  Here, this will refer to the graphics context.)
     */
    function addGraphicsContextExtras(graphics) {
        graphics.strokeLine = function(x1,y1,x2,y2) {
           this.beginPath();
           this.moveTo(x1,y1);
           this.lineTo(x2,y2);
           this.stroke();
        }
        graphics.fillCircle = function(x,y,r) {
           this.beginPath();
           this.arc(x,y,r,0,2*Math.PI,false);
           this.fill();
        }
        graphics.strokeCircle = function(x,y,radius) {
           this.beginPath();
           this.arc(x,y,radius,0,2*Math.PI,false);
           this.stroke();
        }
        graphics.fillPoly = function() { 
            if (arguments.length < 6)
               return;
            this.beginPath();
            this.moveTo(arguments[0],arguments[1]);
            for (var i = 2; i+1 < arguments.length; i = i + 2) { 
               this.lineTo(arguments[i],arguments[i+1]);
            }
            this.closePath();
            this.fill();
        }
        graphics.strokePoly = function() { 
            if (arguments.length < 4)
               return;
            this.beginPath();
            this.moveTo(arguments[0],arguments[1]);
            for (var i = 2; i+1 < arguments.length; i = i + 2) { 
               this.lineTo(arguments[i],arguments[i+1]);
            }
            this.closePath();
            this.stroke();
        }
        graphics.fillOval = function(x,y,horizontalRadius,verticalRadius) {
           this.save();
           this.translate(x,y);
           this.scale(horizontalRadius,verticalRadius);
           this.beginPath();
           this.arc(0,0,1,0,2*Math.PI,false);
           this.restore();
           this.fill();
        }
        graphics.strokeOval = function(x,y,horizontalRadius,verticalRadius) {
           this.save();
           this.translate(x,y);
           this.scale(horizontalRadius,verticalRadius);
           this.beginPath();
           this.arc(0,0,1,0,2*Math.PI,false);
           this.restore();
           this.stroke();
        }
        graphics.getRGB = function(x,y) {
            var color = this.getImageData(x,y,1,1);
            return color.data;
        }
    }    // end of addGraphicsContextExtras()
    
       
    /**
     * The init() function is called after the page has been
     * loaded.  It initializes the canvas and graphics variables,
     * and it installs mouse and key listeners.  If an error
     * occurs, a message is displayed in place of the canvas.
     */
    function init() {
        try {
            canvas = document.getElementById("canvas");
            graphics = canvas.getContext("2d");
        } catch(e) {
            document.getElementById("canvasholder").innerHTML =
               "<p>Canvas graphics is not supported.<br>" +
               "An error occurred while initializing graphics.</p>";
               return;
        }
        addGraphicsContextExtras(graphics);
        installMouseHandler();
        graphics.fillStyle = "white";
        graphics.fillRect(0,0,canvas.width,canvas.height);
    }
    
</script>
</head>
<body onload="init()"> <!-- the onload attribute here is what calls the init() function -->

<h2>Lab 2, Exercise 2: Mousing</h2>

<div class="menu">
    <p><b>Color:</b>
        <select id="colorChoice">
            <option value="0" selected="selected">Random</option>
            <option value="1">Red</option>
            <option value="2">Green</option>
            <option value="3">Blue</option>
            <option value="4">Pink</option>
        </select>
    </p>
    <p>
        <button onclick="clearcanvas()">Clear</button>
    </p>
    <p><b>Wielokąty:</b>
        <select id="wielokatChoice">
            <option value="0">Kwadrat</option>
            <option value="1">Wariant 7</option>
        </select>
    </p>
</div>

<div id="canvasholder">
<canvas id="canvas" width="800" height="600">
    <!-- This message is shown on the page if the browser doesn't support the canvas element. -->
Canvas not supported.
</canvas>
</div>
</body></html>